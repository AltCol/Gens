public class GeneratorManager {
    private final ConcurrentHashMap<UUID, List<Generator>> playerGenerators = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<Location, Generator> locationToGenerator = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<UUID, List<Generator>> queuedGenerators = new ConcurrentHashMap<>();

    private ExecutorService executorService = Executors.newFixedThreadPool(4); 
    private ExecutorService dbExecutorService = Executors.newFixedThreadPool(4);
    private final GeneratorDatabaseStorage generatorDatabaseStorage;
    private final ConcurrentHashMap<UUID, Long> lastUpgradeTimes = new ConcurrentHashMap<>();
    public static final long UPGRADE_COOLDOWN = 100;
    private GeneratorSlotManager generatorSlotManager;
    private ConcurrentHashMap<UUID, Long> lastPlacementTimes = new ConcurrentHashMap<>();
    private ConcurrentHashMap<UUID, Long> lastPickupTimes = new ConcurrentHashMap<>();
    public static final long PLACE_PICKUP_COOLDOWN = 100;
    private final ScheduledExecutorService scheduledExecutorService;

    public GeneratorManager(GeneratorDatabaseStorage generatorDatabaseStorage) {
        this.generatorDatabaseStorage = generatorDatabaseStorage;
        this.scheduledExecutorService = Executors.newScheduledThreadPool(1);
        // Schedule saving task to run every 5 minutes
        this.scheduledExecutorService.scheduleAtFixedRate(this::saveAllGenerators, 5, 5, TimeUnit.MINUTES);
    }

    private void saveAllGenerators() {
        playerGenerators.values().forEach(generatorDatabaseStorage::saveGenerators);
        Bukkit.getLogger().info("All generators saved successfully!");
    }

    public void shutdown() {
        synchronized(playerGenerators) {
            synchronized(locationToGenerator) {
                // Fetch all the generators for each player from the database first
                ConcurrentHashMap<UUID, List<Generator>> dbGenerators = new ConcurrentHashMap<>();
                playerGenerators.keySet().forEach(playerId -> {
                    CompletableFuture<List<Generator>> generators = generatorDatabaseStorage.loadGeneratorsForOwner1(playerId);
                    dbGenerators.put(playerId, generators.join());
                });

                // Compare the generators in memory with the ones in the database and collect the missing ones
                List<Generator> missingGenerators = new ArrayList<>();
                playerGenerators.forEach((playerId, generators) -> {
                    List<Generator> generatorsInDB = dbGenerators.getOrDefault(playerId, Collections.emptyList());
                    generators.stream().filter(generator -> !generatorsInDB.contains(generator)).forEach(missingGenerators::add);
                });

                // Save the missing generators synchronously
                if (!missingGenerators.isEmpty()) {
                    generatorDatabaseStorage.saveGenerators1(missingGenerators);
                }
            }
        }

        // Shut down the executor service
        executorService.shutdown();
        try {
            executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public synchronized void addGenerator(UUID ownerId, Generator generator) {
        dbExecutorService.submit(() -> {

            if (locationToGenerator.containsKey(generator.getLocation())) {
                Bukkit.getLogger().info("Generator at location " + generator.getLocation().toString() + " already exists.");
                return;
            }

            if(locationToGenerator.putIfAbsent(generator.getLocation(), generator) != null) {
                return;
            }

            playerGenerators.compute(ownerId, (key, val) -> {
                if (val == null) {
                    val = new ArrayList<>();
                }
                val.add(generator);
                return val;
            });

            generatorSlotManager.saveSlots();
            updatePlayerSlotsUsedMessage(ownerId);
        });
    }

    public synchronized void removeGenerator(UUID playerId, Generator generator) {
        dbExecutorService.submit(() -> {

            if (!locationToGenerator.containsKey(generator.getLocation())) {
                Bukkit.getLogger().info("Generator at location " + generator.getLocation().toString() + " does not exist.");
                return;
            }

            locationToGenerator.remove(generator.getLocation());
            playerGenerators.computeIfPresent(playerId, (key, list) -> {
                list.remove(generator);
                return list.isEmpty() ? null : list;
            });

            generatorSlotManager.saveSlots();
            updatePlayerSlotsUsedMessage(playerId);
        });
    }

    public boolean upgradeGenerator(Player player, Generator generator) {
        GeneratorType nextType = generator.getType().getNextType();
        if (nextType != null) {
            generator.setType(nextType);

            // Save the upgraded generator immediately
            generatorDatabaseStorage.saveGenerators(Arrays.asList(generator));
            return true;
        }
        return false;
    }

    public void spawnItems() {
        for (UUID playerId : playerGenerators.keySet()) {
            executorService.submit(() -> {
                Player player = Bukkit.getPlayer(playerId);
                if (player != null && player.isOnline() && player.getWorld().getName().equals("plots")) {
                    List<Generator> generators;
                    synchronized(playerGenerators) {
                        generators = new ArrayList<>(playerGenerators.get(playerId));
                    }
                    for (Generator generator : generators) {
                        if (generator.isChunkLoaded()) {
                            Bukkit.getScheduler().runTask(Zana.getInstance(), generator::spawnItem);
                        }
                    }
                }
            });
        }
    }

    public void loadAndAssignGenerators(UUID ownerId) {
        if (playerGenerators.containsKey(ownerId)) {
            return;
        }
        List<Generator> generators = generatorDatabaseStorage.loadGeneratorsForOwner(ownerId).join();
        if(generators != null) {
            for(Generator generator : generators) {
                addGenerators(ownerId, generator);
                //Bukkit.getServer().getLogger().info("Loaded generator for player " + ownerId + " at location " + generator.getLocation());
            }
        }
    }

    public synchronized void savePlayerData(UUID playerId) {
        // Fetch the generators for the player from the database first
        CompletableFuture<List<Generator>> dbGeneratorsFuture = generatorDatabaseStorage.loadGeneratorsForOwner(playerId);
        List<Generator> dbGenerators = dbGeneratorsFuture.join();

        // Get the generators in memory for the player
        List<Generator> playerGenerators = this.playerGenerators.getOrDefault(playerId, Collections.emptyList());

        // Compare the generators in memory with the ones in the database and collect the missing ones
        List<Generator> missingGenerators = playerGenerators.stream()
                .filter(generator -> !dbGenerators.contains(generator))
                .collect(Collectors.toList());

        // Save the missing generators asynchronously
        if (!missingGenerators.isEmpty()) {
            System.out.println("Resaving " + missingGenerators.size() + " generators that were missing in the database.");
            generatorDatabaseStorage.saveGenerators(missingGenerators);
        }
    }
}

public class GeneratorDatabaseStorage {
    private final Database database;

    public GeneratorDatabaseStorage(Database database) {
        this.database = database;
    }

    //saveGenerators1 and loadGenerators1 are just a synchronous variation of saveGenerators and loadGenerators for the shutdown() method

    public CompletableFuture<Void> saveGenerators(List<Generator> generators) {
        return database.getConnectionAsync().thenAcceptAsync(conn -> {
            String sql = "INSERT INTO generators (uuid, slot, type, world, x, y, z) VALUES (?, ?, ?, ?, ?, ?, ?) ON DUPLICATE KEY UPDATE slot = VALUES(slot), type = VALUES(type), world = VALUES(world), x = VALUES(x), y = VALUES(y), z = VALUES(z)";
            try {
                conn.setAutoCommit(false); // Start the transaction
                try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                    for (Generator generator : generators) {
                        try {
                            World world = generator.getLocation().getWorld();
                            if (world == null) continue; // Skip saving generator if its world is null
                            //Bukkit.getLogger().info("In saveGenerators...");
                            stmt.setString(1, generator.getOwnerId().toString());
                            stmt.setInt(2, generator.getSlot());
                            stmt.setString(3, generator.getType().name());
                            stmt.setString(4, world.getName());
                            stmt.setInt(5, generator.getLocation().getBlockX());
                            stmt.setInt(6, generator.getLocation().getBlockY());
                            stmt.setInt(7, generator.getLocation().getBlockZ());
                            stmt.addBatch();
                        } catch (SQLException e) {
                            Bukkit.getLogger().severe("Failed to save generator: " + generator.getOwnerId().toString() + " at location " + generator.getLocation().toString());
                            e.printStackTrace();
                        }
                    }
                    stmt.executeBatch();
                    conn.commit(); // Commit the transaction
                    //Bukkit.getLogger().info("Successfully committed the transaction: saveGenerator");
                } catch (SQLException e) {
                    conn.rollback(); // If anything went wrong, roll back the transaction
                    Bukkit.getLogger().severe("Failed to save generator batch. Transaction rolled back: SAVING");
                    e.printStackTrace();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }, r -> Bukkit.getScheduler().runTaskAsynchronously(Zana.getInstance(), r));
    }

    public CompletableFuture<List<Generator>> loadGeneratorsForOwner(UUID ownerId) {
        return database.getConnectionAsync().thenApplyAsync(conn -> {
            String sql = "SELECT * FROM generators WHERE uuid = ?";
            List<Generator> generators = new ArrayList<>();
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, ownerId.toString());
                ResultSet rs = stmt.executeQuery();
                while (rs.next()) {
                    int slot = rs.getInt("slot");
                    String type = rs.getString("type");
                    String worldName = rs.getString("world");
                    int x = rs.getInt("x");
                    int y = rs.getInt("y");
                    int z = rs.getInt("z");
                    World world = Bukkit.getServer().getWorld(worldName);
                    Location location = new Location(world, x, y, z);
                    Generator generator = new Generator(ownerId, GeneratorType.valueOf(type), location, slot);
                    generators.add(generator);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return generators;
        }, r -> Bukkit.getScheduler().runTaskAsynchronously(Zana.getInstance(), r));
    }

    public CompletableFuture<Void> removeGeneratorsForOwner(UUID ownerId) {
        return database.getConnectionAsync().thenAcceptAsync(conn -> {
            String sql = "DELETE FROM generators WHERE uuid = ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, ownerId.toString());
                stmt.executeUpdate();
                conn.commit();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }, r -> Bukkit.getScheduler().runTaskAsynchronously(Zana.getInstance(), r));
    }

    public CompletableFuture<Void> removeGenerator(Generator generator) {
        String deleteSql = "DELETE FROM generators WHERE x = ? AND y = ? AND z = ? AND world = ? AND uuid = ?";

        return database.getConnectionAsync().thenComposeAsync(conn -> {
            CompletableFuture<Void> future = new CompletableFuture<>();
            try {
                conn.setAutoCommit(false); // Start the transaction
                try (PreparedStatement deleteStmt = conn.prepareStatement(deleteSql)) {
                    deleteStmt.setInt(1, generator.getLocation().getBlockX());
                    deleteStmt.setInt(2, generator.getLocation().getBlockY());
                    deleteStmt.setInt(3, generator.getLocation().getBlockZ());
                    deleteStmt.setString(4, generator.getLocation().getWorld().getName());
                    deleteStmt.setString(5, generator.getOwnerId().toString());
                    int affectedRows = deleteStmt.executeUpdate();
                    if (affectedRows == 0) {
                        Bukkit.getLogger().info("Generator: " + generator.getOwnerId().toString() + " at location " + generator.getLocation().toString() + " does not exist in the database.");
                    }
                    conn.commit(); // Commit the transaction if successful
                    //Bukkit.getLogger().info("Successfully committed the transaction: removeGenerator");
                } catch (SQLException e) {
                    conn.rollback(); // If anything went wrong, roll back the transaction
                    Bukkit.getLogger().severe("Failed to delete generator: " + generator.getOwnerId().toString() + " at location " + generator.getLocation().toString());
                    e.printStackTrace();
                }
                future.complete(null);
            } catch (SQLException e) {
                future.completeExceptionally(e);
            }
            return future;
        }, r -> Bukkit.getScheduler().runTaskAsynchronously(Zana.getInstance(), r));
    }
}

    @Override
    public void onEnable() {
        instance = this;
        saveDefaultConfig();
        Database database = new Database("carvins.bloom.host:3306", "s34136_generators", "u34136_skQP0nLI8p", "LnAxtFyPSBtkZydShdzMVdPM");
        try {
            database.connect();
        } catch (SQLException e) {
            e.printStackTrace();
            getLogger().severe("Failed to connect to the database.");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }
        generatorDatabaseStorage = new GeneratorDatabaseStorage(database);
        boosterManager = new BoosterManager();
        generatorManager = new GeneratorManager(generatorDatabaseStorage);
        generatorSlotManager = new GeneratorSlotManager(database, generatorManager);
        generatorManager.setGeneratorSlotManager(generatorSlotManager);
        GeneratorCommand generatorCommand = new GeneratorCommand(generatorSlotManager, generatorManager);
        getCommand("generator").setExecutor(generatorCommand);
        getCommand("generator").setTabCompleter(generatorCommand);
        getServer().getPluginManager().registerEvents(new GeneratorListener(generatorManager), this);
}
